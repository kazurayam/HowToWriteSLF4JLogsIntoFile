plugins {
  id 'groovy'
  id 'maven-publish'
  id 'signing'
}

group = 'com.kazurayam'
version = '0.3.0'

ext {
  groovyVersion = '2.4.21'
  isReleaseVersion = ! version.endsWith('SNAPSHOT')
  repositoryName = 'HowToWriteLSF4JLogsIntoFile'
}

configurations {
  generateDocs
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
  implementation fileTree(dir: "/Applications/Katalon Studio.app/Contents/Eclipse/plugins", include: ['*.jar'])
  generateDocs "org.codehaus.groovy:groovy-all:${groovyVersion}"
}

sourceSets {
  main {
    groovy {
      srcDirs = ['Keywords']
      srcDir 'Libs'
      include 'com/kazurayam/ks/*'
    }
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:unchecked'
}

task groovydoc(type: Groovydoc, overwrite:true) {
  source = sourceSets.main.groovy
  classpath = configurations.generateDocs
  groovyClasspath = configurations.generateDocs
  include 'com/kazurayam/ks/*'
  exclude '**/*Test.groovy'
}

task publishGroovydoc(type: Copy) {
  from 'build/docs/groovydoc'
  into 'docs/api'
}

groovydoc.finalizedBy publishGroovydoc

task groovydocJar(type: Jar) {
  archiveClassifier = 'javadoc'
  from groovydoc
}

task sourcesJar(type: Jar) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

publishing {
  publications {
    loggercontextconfigurator(MavenPublication) {
      artifact sourcesJar
      artifact groovydocJar
      pom {
        groupId = project.group
        name = project.rootProject.name
        description = 'A classlib that enables you to customize Logback configuration on the fly'
        url = 'https://github.com/kazurayam/HowToWriteSLF4JLogsIntoFile'
        from components.java
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org.licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'kazurayam'
            name = 'URAYAMA,kazuaki'
            email = 'kazuaki.urayama@gmail.com'
          }
        }
        scm {
          connection = "scm:git:https://github.com/kazurayam/${repositoryName}.git"
          developerConnection = "scm:git:git@github.com:kazurayam/${repositoryName}.git"
          url = "https://github.com/kazurayam/${repositoryName}"
        }
      }
    }
  }
  repositories {
    maven {
      def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo: snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
    }
  }
}
